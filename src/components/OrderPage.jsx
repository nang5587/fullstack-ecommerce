// ÌõÖ Î™©Î°ù
import { useCart } from "./CartContext"
import { useNavigate } from "react-router-dom"
import { useEffect, useState } from "react"

// UI Î™©Î°ù
import TailButton from "../UI/TailButton";

// component Î™©Î°ù
import AddressInput from "./AddressInput";
import ErrorMessage from "./ErrorMessage";


import jwt_decode from "jwt-decode";


export default function OrderPage() {
    const [orderItems, setOrderItems] = useState([]);
    const { cartItems, clearCart, removeItemsFromCart } = useCart();
    const navigate = useNavigate();

    const [newAddress, setNewAddress] = useState({
        name: '', phone: '', address1: '', address2: '', zip: '',
    });

    // Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ Î™©Î°ù
    const [existingAddresses, setExistingAddresses] = useState([]);
    const [selectedAddressId, setSelectedAddressId] = useState(null);

    const [payment, setPayment] = useState('');
    const [errorMsg, setErrorMsg] = useState('');
    const [showPayment, setShowPayment] = useState(false);

    const isAddressValid = () => {
        return (
            address.name.trim() &&
            /^01[0-9]-\d{3,4}-\d{4}$/.test(address.phone) &&
            address.zip &&
            address.address1
        );
    };

    // --- Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è UI Î°úÏßÅ ---
    const token = localStorage.getItem('accessToken');
    useEffect(() => {
        // Ï£ºÎ¨∏Ìï† ÏÉÅÌíà Ï†ïÎ≥¥ Î°úÎìú
        const stored = localStorage.getItem('orderItems');
        if (stored) {
            setOrderItems(JSON.parse(stored));
        }

        // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎùºÎ©¥, Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
        // const token = localStorage.getItem('accessToken');
        if (token) {
            const fetchAddresses = async () => {
                try {
                    const baseUrl = import.meta.env.VITE_BACKEND_URL;

                    // ‚òÖ‚òÖ‚òÖ GET Î©îÏÑúÎìúÎ°ú Ï†ïÌôïÌïòÍ≤å ÏàòÏ†ï ‚òÖ‚òÖ‚òÖ
                    const res = await fetch(`http://${baseUrl}/api/member/address`, {
                        method: 'GET', // GET ÏöîÏ≤≠ÏûÑÏùÑ Î™ÖÏãú (ÏÇ¨Ïã§ fetchÏùò Í∏∞Î≥∏Í∞íÏù¥ GETÏù¥Îùº ÏÉùÎûµ Í∞ÄÎä•)
                        headers: {
                            'Authorization': `Bearer ${token}`
                            // GET ÏöîÏ≤≠ÏóêÎäî 'Content-Type': 'application/json' Ïù¥ ÌïÑÏöî ÏóÜÏäµÎãàÎã§.
                        }
                    });

                    if (res.ok) {
                        const data = await res.json();
                        // Î∞±ÏóîÎìú ÏùëÎãµÏù¥ { "addresses": [...] } ÌòïÌÉúÏùº Í≤ÉÏúºÎ°ú Í∞ÄÏ†ï
                        setExistingAddresses(data.addresses || []);
                    } else {
                        // ÏÑúÎ≤ÑÏóêÏÑú ÏóêÎü¨ ÏùëÎãµÏùÑ Î≥¥ÎÉàÏùÑ Í≤ΩÏö∞
                        console.error("ÏÑúÎ≤ÑÏóêÏÑú Î∞∞ÏÜ°ÏßÄ Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", res.status);
                    }
                } catch (err) {
                    console.error("Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ Î™©Î°ù Î°úÎìú Ï§ë ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î∞úÏÉù:", err);
                }
            };
            fetchAddresses();
        }
    }, []);

    useEffect(() => {
        // isAddressValid Ìï®ÏàòÎèÑ newAddressÎ•º ÏÇ¨Ïö©ÌïòÎèÑÎ°ù ÏàòÏ†ïÌï¥Ïïº Ìï©ÎãàÎã§.
        const isNewAddressValid = () => {
            return (
                newAddress.name.trim() &&
                /^01[0-9]-\d{3,4}-\d{4}$/.test(newAddress.phone) &&
                newAddress.zip &&
                newAddress.address1
            );
        };

        // Í∏∞Ï°¥ Ï£ºÏÜåÎ•º ÏÑ†ÌÉùÌñàÍ±∞ÎÇò, ÏÉà Ï£ºÏÜåÍ∞Ä Ïú†Ìö®Ìï† Îïå Í≤∞Ï†ú ÏàòÎã®ÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§.
        setShowPayment(selectedAddressId || isNewAddressValid());

    }, [newAddress, selectedAddressId]);

    const handleNewAddressChange = (e) => {
        const { name, value } = e.target;
        let finalValue = value;
        if (name === 'phone') {
            const digits = value.replace(/\D/g, '');
            let formatted = digits;
            if (digits.length > 3 && digits.length <= 7) {
                formatted = `${digits.slice(0, 3)}-${digits.slice(3)}`;
            } else if (digits.length > 7) {
                formatted = `${digits.slice(0, 3)}-${digits.slice(3, 7)}-${digits.slice(7, 11)}`;
            }
            finalValue = formatted;
        }
        setNewAddress(prev => ({ ...prev, [name]: finalValue }));
        setSelectedAddressId(null); // ÏÉà Ï£ºÏÜå ÏûÖÎ†• Ïãú, ÏÑ†ÌÉùÎêú Í∏∞Ï°¥ Ï£ºÏÜåÎäî Ï¥àÍ∏∞Ìôî
    };

    const handleSelectAddress = (addressId) => {
        setSelectedAddressId(addressId);
        // Í∏∞Ï°¥ Ï£ºÏÜå ÏÑ†ÌÉù Ïãú, ÏÉà Ï£ºÏÜå ÏûÖÎ†• ÌèºÏùÄ ÎπÑÏõåÏ£ºÎäî Í≤ÉÏù¥ ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏóê Ï¢ãÏùå
        setNewAddress({ name: '', phone: '', address1: '', address2: '', zip: '' });
    };

    // --- Ï£ºÎ¨∏ Ï≤òÎ¶¨ Î°úÏßÅ ---
    const handleOrder = async () => {
        // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if (!payment) {
            setErrorMsg('Í≤∞Ï†ú ÏàòÎã®ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }
        // Í∏∞Ï°¥ Ï£ºÏÜåÎ•º ÏÑ†ÌÉùÌïòÏßÄÎèÑ, ÏÉà Ï£ºÏÜåÎ•º Ï†úÎåÄÎ°ú ÏûÖÎ†•ÌïòÏßÄÎèÑ ÏïäÏùÄ Í≤ΩÏö∞
        if (!selectedAddressId && (!newAddress.name.trim() || !newAddress.phone.trim() || !newAddress.zip || !newAddress.address1)) {
            setErrorMsg('Î∞∞ÏÜ°ÏßÄ Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÍ±∞ÎÇò ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const token = localStorage.getItem('accessToken');
        if (!token) {
            alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            navigate('/login?redirect=/order');
            return;
        }
        setErrorMsg('');

        try {
            const baseUrl = import.meta.env.VITE_BACKEND_URL;

            // ‚òÖ‚òÖ‚òÖ ÌïµÏã¨ Î∂ÑÍ∏∞ Î°úÏßÅ ‚òÖ‚òÖ‚òÖ
            // ÏÑúÎ≤ÑÎ°ú Î≥¥ÎÇº Îç∞Ïù¥ÌÑ∞Î•º Ï§ÄÎπÑÌï©ÎãàÎã§.
            let orderPayload;
            let finalOrderInfo; // orderInfo Í∞ùÏ≤¥Î•º ÎØ∏Î¶¨ ÏÑ†Ïñ∏

            if (selectedAddressId) {
                // --- Ïû¨Ï£ºÎ¨∏ ÏãúÎÇòÎ¶¨Ïò§ ---
                // Í∏∞Ï°¥ Ï£ºÏÜå Î™©Î°ùÏóêÏÑú ÏÑ†ÌÉùÎêú Ï£ºÏÜå Ï†ïÎ≥¥Î•º Ï∞æÏäµÎãàÎã§.
                const chosenAddress = existingAddresses.find(addr => addr.addressId === selectedAddressId);

                console.log("üöÄ Ïû¨Ï£ºÎ¨∏ ÏãúÎÇòÎ¶¨Ïò§: Í∏∞Ï°¥ Ï£ºÏÜå Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.");

                // Ï∞æÏùÄ Ï£ºÏÜå Ï†ïÎ≥¥Î°ú orderInfo Í∞ùÏ≤¥Î•º Íµ¨ÏÑ±Ìï©ÎãàÎã§.
                finalOrderInfo = {
                    zip: chosenAddress.zip,
                    address1: chosenAddress.address1,
                    address2: chosenAddress.address2,
                    phone: chosenAddress.phone,
                    // addressIdÎäî Î∞±ÏóîÎìúÍ∞Ä ÏöîÍµ¨ÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú Ìè¨Ìï®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.
                    // Îã®, Î∞±ÏóîÎìúÍ∞Ä Ï£ºÏÜå ÏãùÎ≥ÑÏùÑ ÏúÑÌï¥ ÌïÑÏöîÎ°ú ÌïúÎã§Î©¥ Ï∂îÍ∞ÄÌï¥Ïïº Ìï©ÎãàÎã§.
                    // addressId: selectedAddressId,
                    payment: payment,
                    total: total,
                    orderstatus: "Ï£ºÎ¨∏ÏôÑÎ£å"
                };

            } else {
                // --- Ï≤´ Ï£ºÎ¨∏ ÏãúÎÇòÎ¶¨Ïò§ ---
                console.log("üöÄ Ï≤´ Ï£ºÎ¨∏ ÏãúÎÇòÎ¶¨Ïò§: ÏÉàÎ°ú ÏûÖÎ†•Ìïú Ï£ºÏÜå Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.");

                // ÏÉàÎ°ú ÏûÖÎ†•Ìïú Ï£ºÏÜå Ï†ïÎ≥¥Î°ú orderInfo Í∞ùÏ≤¥Î•º Íµ¨ÏÑ±Ìï©ÎãàÎã§.
                finalOrderInfo = {
                    zip: newAddress.zip,
                    address1: newAddress.address1,
                    address2: newAddress.address2,
                    phone: newAddress.phone,
                    name: newAddress.name, // Ïù¥Î¶ÑÎèÑ orderInfoÏóê Ìè¨Ìï®ÎêòÏñ¥Ïïº ÌïúÎã§Î©¥ Ï∂îÍ∞Ä
                    payment: payment,
                    total: total,
                    orderstatus: "Ï£ºÎ¨∏ÏôÑÎ£å"
                };
            }

            // ÏµúÏ¢Ö ÌéòÏù¥Î°úÎìúÎ•º Ï°∞Î¶ΩÌï©ÎãàÎã§.
            orderPayload = {
                orderInfo: finalOrderInfo,
                items: orderItems.map(item => ({
                    optionid: item.optionid,
                    quantity: item.quantity,
                    price: item.price
                }))
            };

            console.log('üì¶ Î∞±ÏóîÎìúÎ°ú Ï†ÑÏÜ°Ìï† ÏµúÏ¢Ö Ï£ºÎ¨∏ Ï†ïÎ≥¥:', JSON.stringify(orderPayload, null, 2));

            const orderResponse = await fetch(`http://${baseUrl}/api/member/orders`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                body: JSON.stringify(orderPayload),
            });

            if (!orderResponse.ok) {
                const error = await orderResponse.json();
                throw new Error(error.message || 'Ï£ºÎ¨∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            const result = await orderResponse.json();
            console.log('üéâ Ï£ºÎ¨∏ ÏÑ±Í≥µ! ÏÑúÎ≤Ñ ÏùëÎãµ:', result);

            // ‚òÖ‚òÖ‚òÖ clearCart() ÎåÄÏã† removeItemsFromCart() Ìò∏Ï∂ú ‚òÖ‚òÖ‚òÖ
            // Ï£ºÎ¨∏Ìïú ÏÉÅÌíàÎì§(orderItems)Ïùò Ï†ïÎ≥¥Î•º ÎÑòÍ≤®Ï§çÎãàÎã§.
            await removeItemsFromCart(orderItems);

            localStorage.removeItem('orderItems');
            alert('Ï£ºÎ¨∏Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
            navigate('/');
        } catch (err) {
            console.error("Ï£ºÎ¨∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", err);
            setErrorMsg(err.message || 'ÏÑúÎ≤ÑÏôÄÏùò ÌÜµÏã† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // --- Î†åÎçîÎßÅÏùÑ ÏúÑÌïú Í≥ÑÏÇ∞ ---
    const subtotal = orderItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const shippingFee = subtotal >= 50000 ? 0 : 3000;
    const total = subtotal + shippingFee;
    const formatToKRW = (num) => num.toLocaleString() + 'Ïõê';

    return (
        <div className="mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-8 py-12 lg:py-16">
            <div className="mt-12 flex flex-col lg:flex-row gap-12">
                <div className="lg:w-2/3 space-y-8">
                    {/* --- Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ ÏÑ†ÌÉù --- */}
                    {existingAddresses.length > 0 && (
                        <div>
                            <h2 id='font3' className="text-2xl tracking-tight text-kalani-navy mb-4">Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ ÏÑ†ÌÉù</h2>
                            <div className="space-y-3">
                                {existingAddresses.map(addr => (
                                    <div key={addr.addressId}
                                        onClick={() => handleSelectAddress(addr.addressId)}
                                        className={`p-4 border rounded-md cursor-pointer transition-all ${selectedAddressId === addr.addressId ? 'border-kalani-gold bg-kalani-gold/10' : 'border-gray-200'}`}>
                                        <p className="font-semibold">{addr.name} ({addr.phone})</p>
                                        <p className="text-sm text-gray-600">[{addr.zip}] {addr.address1} {addr.address2}</p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* --- ÏÉà Î∞∞ÏÜ°ÏßÄ ÏûÖÎ†• --- */}
                    <div>
                        <h2 id='font3' className="text-2xl tracking-tight text-kalani-navy mt-2 mb-4">
                            {existingAddresses.length > 0 ? 'ÏÉà Î∞∞ÏÜ°ÏßÄ ÏûÖÎ†•' : 'Î∞∞ÏÜ°ÏßÄ Ï†ïÎ≥¥'}
                        </h2>
                        <div className="space-y-4">
                            <input type="text" name="name" placeholder="Ïù¥Î¶Ñ" value={newAddress.name} onChange={handleNewAddressChange} className="w-full border border-gray-200 rounded-md px-4 py-2 focus-within:outline-kalani-gold" />
                            <input type="text" name="phone" placeholder="Ïó∞ÎùΩÏ≤ò" value={newAddress.phone} onChange={handleNewAddressChange} className="w-full border border-gray-200 rounded-md px-4 py-2 focus-within:outline-kalani-gold" />
                            <div className="flex gap-2">
                                <input name="zip" value={newAddress.zip} onChange={handleNewAddressChange} placeholder="Ïö∞Ìé∏Î≤àÌò∏" className="w-full border border-gray-200 rounded-md px-4 py-2" readOnly />
                                <div className="w-28">
                                    <AddressInput onComplete={({ zip, address1 }) => setNewAddress(prev => ({ ...prev, zip, address1, name: prev.name, phone: prev.phone }))} />
                                </div>
                            </div>
                            <input name="address1" value={newAddress.address1} onChange={handleNewAddressChange} placeholder="Í∏∞Î≥∏Ï£ºÏÜå" className="w-full border border-gray-200 rounded-md px-4 py-2" readOnly />
                            <input name="address2" value={newAddress.address2} onChange={handleNewAddressChange} placeholder="ÏÉÅÏÑ∏Ï£ºÏÜå" className="w-full border border-gray-200 rounded-md px-4 py-2 focus-within:outline-kalani-gold" />
                        </div>
                    </div>

                    {/* Í≤∞Ï†ú ÏàòÎã® ÏÑ†ÌÉù */}
                    <div
                        className={`overflow-hidden transition-all duration-500 ease-in-out transform ${showPayment
                            ? 'max-h-[300px] opacity-100 translate-y-0'
                            : 'max-h-0 opacity-0 -translate-y-3'
                            }`}
                    >
                        <h2 id="font3" className="text-3xl lg:text-3xl tracking-tight text-kalani-navy mt-2 mb-5">Í≤∞Ï†ú ÏàòÎã® ÏÑ†ÌÉù</h2>
                        <div className="flex gap-6">
                            <label className="flex items-center gap-2 cursor-pointer text-gray-700">
                                <input
                                    type="radio"
                                    name="payment"
                                    value="card"
                                    checked={payment === 'card'}
                                    onChange={(e) => setPayment(e.target.value)}
                                    className="form-radio"
                                />
                                Ïã†Ïö©/Ï≤¥ÌÅ¨ Ïπ¥Îìú
                            </label>
                            <label className="flex items-center gap-2 cursor-pointer">
                                <input
                                    type="radio"
                                    name="payment"
                                    value="bank"
                                    checked={payment === 'bank'}
                                    onChange={(e) => setPayment(e.target.value)}
                                    className="form-radio"
                                />
                                Î¨¥ÌÜµÏû• ÏûÖÍ∏à
                            </label>
                        </div>
                    </div>
                    <ErrorMessage errorMsg={errorMsg} />
                </div>


                {/* Ï£ºÎ¨∏ ÏöîÏïΩ */}
                <div className="flex flex-col justify-between lg:w-1/3 border border-gray-200 rounded-md p-6 shadow-nm bg-white space-y-4">
                    <div>
                        <h2 className="text-lg font-semibold text-kalani-navy mb-4">Ï£ºÎ¨∏ ÏöîÏïΩ</h2>
                        <div className="text-sm text-gray-700 space-y-2">
                            <div className="flex justify-between">
                                <span>ÏÉÅÌíà Í∏àÏï°</span>
                                <span>{formatToKRW(subtotal)}</span>
                            </div>
                            <div className="flex justify-between">
                                <span>Î∞∞ÏÜ°ÎπÑ</span>
                                <span>{shippingFee === 0 ? 'Î¨¥Î£å' : formatToKRW(shippingFee)}</span>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div className="border-t border-gray-300 pt-3 flex justify-between font-bold text-base text-kalani-ash">
                            <span>Ï¥ù Í≤∞Ï†ú Í∏àÏï°</span>
                            <span>{formatToKRW(total)}</span>
                        </div>
                        <TailButton variant="navy" className="w-full mt-4 hover:bg-kalani-gold" onClick={handleOrder}>
                            Í≤∞Ï†úÌïòÍ∏∞
                        </TailButton>
                    </div>
                </div>
            </div></div>
    );
}
