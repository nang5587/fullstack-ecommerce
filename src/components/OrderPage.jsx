// ÌõÖ Î™©Î°ù
import { useCart } from "./CartContext"
import { useNavigate } from "react-router-dom"
import { useEffect, useState } from "react"

// UI Î™©Î°ù
import TailButton from "../UI/TailButton";

// component Î™©Î°ù
import AddressInput from "./AddressInput";
import ErrorMessage from "./ErrorMessage";
import Modal from "./Modal"; // ‚úÖ Î∞©Í∏à ÎßåÎì† Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
import EditAddressForm from './EditAddressForm';

import jwt_decode from "jwt-decode";

import api from '../api/axios'


export default function OrderPage() {
    const { removeItemsFromCart } = useCart();
    const navigate = useNavigate();

    const [orderItems, setOrderItems] = useState([]);
    const [newAddress, setNewAddress] = useState({
        name: '', phone: '', address1: '', address2: '', zip: '',
    });

    // Í∏∞Ï°¥ Î∞∞ÏÜ°ÏßÄ Î™©Î°ù
    const [existingAddresses, setExistingAddresses] = useState([]);
    const [selectedAddressId, setSelectedAddressId] = useState(null);

    const [payment, setPayment] = useState('');
    const [errorMsg, setErrorMsg] = useState('');

    const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(true);

    const isAddressValid = () => {
        return (
            address.name.trim() &&
            /^01[0-9]-\d{3,4}-\d{4}$/.test(address.phone) &&
            address.zip &&
            address.address1
        );
    };

    // --- Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è UI Î°úÏßÅ ---
    const refetchAddresses = async () => {
        // api Ïù∏Ïä§ÌÑ¥Ïä§Ïùò ÏöîÏ≤≠ Ïù∏ÌÑ∞ÏÖâÌÑ∞Í∞Ä ÌÜ†ÌÅ∞ÏùÑ ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞ÄÌï¥Ï£ºÎØÄÎ°ú,
        // Ïó¨Í∏∞ÏÑú ÌÜ†ÌÅ∞ÏùÑ ÏßÅÏ†ë ÌôïÏù∏ÌïòÍ±∞ÎÇò Ìó§ÎçîÎ•º ÏÑ§Ï†ïÌï† ÌïÑÏöîÍ∞Ä ÏóÜÏäµÎãàÎã§.
        try {
            // GET ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Í≥†, Îëê Î≤àÏß∏ Ïù∏ÏûêÎ°ú config Í∞ùÏ≤¥Î•º Ï†ÑÎã¨Ìï©ÎãàÎã§.
            // ÎßåÏïΩ Î≥¥ÎÇº ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÎã§Î©¥ Ïó¨Í∏∞Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§. Ïòà: { params: { type: 'all' } }
            const response = await api.get('/api/member/address');

            // ‚úÖ axiosÎäî ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º response.dataÏóê Îã¥ÏïÑÏ§çÎãàÎã§.
            const data = response.data;
            console.log("Ï£ºÏÜå Î™©Î°ù Îç∞Ïù¥ÌÑ∞:", data);

            // ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ Î∞∞Ïó¥Ïù¥ ÏïÑÎãê Í≤ΩÏö∞Î•º ÎåÄÎπÑÌïú Î∞©Ïñ¥ ÏΩîÎìú
            const addresses = Array.isArray(data) ? data : [];
            setExistingAddresses(addresses);

            // Í∏∞Î≥∏ Î∞∞ÏÜ°ÏßÄ ÎòêÎäî Ï≤´ Î≤àÏß∏ Î∞∞ÏÜ°ÏßÄ ÏûêÎèô ÏÑ†ÌÉù Î°úÏßÅ
            const mainAddress = addresses.find(addr => addr.isMain);
            if (mainAddress) {
                setSelectedAddressId(mainAddress.addressId);
            } else if (addresses.length > 0) {
                setSelectedAddressId(addresses[0].addressId);
            }

            return addresses; // ÏÉàÎ°ú Î∂àÎü¨Ïò® Ï£ºÏÜå Î™©Î°ù Î∞òÌôò

        } catch (err) {
            // ‚úÖ axiosÎäî 4xx, 5xx ÏóêÎü¨Î•º catch Î∏îÎ°ùÏúºÎ°ú Ï≤òÎ¶¨Ìï©ÎãàÎã§.
            console.error("Î∞∞ÏÜ°ÏßÄ Î™©Î°ù Î°úÎìú Ïã§Ìå®:", err.response?.data || err.message);
            setExistingAddresses([]); // Ïã§Ìå® Ïãú ÏÉÅÌÉúÎ•º ÌôïÏã§Ìûà ÎπÑÏõåÏ§å
            return []; // Ïã§Ìå® Ïãú Îπà Î∞∞Ïó¥ Î∞òÌôò
        }
    };

    useEffect(() => {
        // Ï£ºÎ¨∏Ìï† ÏÉÅÌíà Ï†ïÎ≥¥ Î°úÎìú
        const stored = localStorage.getItem('orderItems');
        if (stored) {
            setOrderItems(JSON.parse(stored));
        }

        // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ï£ºÏÜå Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
        const initFetch = async () => {
            setIsLoading(true);
            const addresses = await refetchAddresses();
            setIsLoading(false);
            console.log(addresses)

            // ‚úÖ Î°úÎî©Ïù¥ ÎÅùÎÇ¨ÎäîÎç∞ Ï£ºÏÜåÍ∞Ä ÌïòÎÇòÎèÑ ÏóÜÏúºÎ©¥, Ï£ºÏÜå Ï∂îÍ∞Ä Î™®Îã¨ÏùÑ ÏûêÎèôÏúºÎ°ú ÏóΩÎãàÎã§.
            if (addresses.length === 0) {
                setIsAddressModalOpen(true);
            }
        };

        initFetch();
    }, []);

    // ‚úÖ Ï£ºÏÜå Í¥ÄÎ¶¨ Î™®Îã¨ÏóêÏÑú Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏÉùÍ≤ºÏùÑ Îïå Ìò∏Ï∂úÎê† Ìï®Ïàò
    const handleAddressDataChange = async () => {
        refetchAddresses(); // Ï£ºÏÜå Î™©Î°ùÏùÑ Îã§Ïãú Î∂àÎü¨ÏôÄ ÌôîÎ©¥ÏùÑ ÏµúÏã† ÏÉÅÌÉúÎ°ú Ïú†ÏßÄ
        setIsAddressModalOpen(false); // ÏûëÏóÖÏù¥ ÎÅùÎÇ¨ÏúºÎãà Î™®Îã¨ÏùÑ Îã´Ïùå
    };


    // --- Ï£ºÎ¨∏ Ï≤òÎ¶¨ Î°úÏßÅ ---
    const handleOrder = async () => {
        // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if (!selectedAddressId) {
            setErrorMsg('Î∞∞ÏÜ°ÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî. Î∞∞ÏÜ°ÏßÄÍ∞Ä ÏóÜÎã§Î©¥ "Î∞∞ÏÜ°ÏßÄ Í¥ÄÎ¶¨"ÏóêÏÑú Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }
        if (!payment) {
            setErrorMsg('Í≤∞Ï†ú ÏàòÎã®ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const token = localStorage.getItem('accessToken');
        if (!token) {
            alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            navigate('/login?redirect=/order');
            return;
        }

        setErrorMsg('');

        try {
            // ‚úÖ ÏÑ†ÌÉùÎêú Ï£ºÏÜå IDÎ•º Ïù¥Ïö©Ìï¥ Ï†ÑÏ≤¥ Ï£ºÏÜå Ï†ïÎ≥¥Î•º Ï∞æÏäµÎãàÎã§.
            const chosenAddress = existingAddresses.find(addr => addr.addressId === selectedAddressId);
            if (!chosenAddress) {
                throw new Error("ÏÑ†ÌÉùÎêú Î∞∞ÏÜ°ÏßÄ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }

            const orderPayload =  // 1. ÏµúÏÉÅÏúÑ Íµ¨Ï°∞Î•º Î∞∞Ïó¥Î°ú Î≥ÄÍ≤Ω
                {
                    orderInfo: { // 2. orderInfoÏóêÎäî Ï£ºÎ¨∏ Í¥ÄÎ†® Ï†ïÎ≥¥Îßå Ìè¨Ìï®
                        // usernameÏùÄ ÌÜ†ÌÅ∞ÏóêÏÑú Ï∂îÏ∂úÌïòÎØÄÎ°ú ÌîÑÎ°†Ìä∏ÏóêÏÑú Î≥¥ÎÇº ÌïÑÏöî ÏóÜÏùå
                        total: total,
                        orderstatus: "Ï£ºÎ¨∏ÏôÑÎ£å",
                        payment: payment,
                        // orderdateÎäî Î∞±ÏóîÎìúÏóêÏÑú ÏÉùÏÑ±ÌïòÎØÄÎ°ú Î≥¥ÎÇº ÌïÑÏöî ÏóÜÏùå
                    },
                    address: { // 3. address Í∞ùÏ≤¥Î•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏÉùÏÑ±
                        // addressIdÎäî Í∏∞Ï°¥ Ï£ºÏÜåÎ•º ÏãùÎ≥ÑÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.
                        // Î∞±ÏóîÎìúÍ∞Ä addressIdÎßå Î∞õÏïÑÏÑú Ï≤òÎ¶¨ÌïòÎäîÏßÄ, ÏïÑÎãàÎ©¥ Ï†ÑÏ≤¥ Ï£ºÏÜå Ï†ïÎ≥¥Î•º Î∞õÎäîÏßÄ ÌôïÏù∏ ÌïÑÏöî
                        addressId: chosenAddress.addressId, // ‚òÖ‚òÖ‚òÖ Î∞±ÏóîÎìúÏôÄ ÌòëÏùò ÌïÑÏöî ‚òÖ‚òÖ‚òÖ
                        name: chosenAddress.name,
                        zip: chosenAddress.zip,
                        address1: chosenAddress.address1,
                        address2: chosenAddress.address2,
                        phone: chosenAddress.phone,
                        main: chosenAddress.isMain, // isMain -> mainÏúºÎ°ú ÌïÑÎìúÎ™Ö Î≥ÄÍ≤Ω
                        // deleteAddrÎäî Ï£ºÎ¨∏ Ïãú Î≥¥ÎÇº ÌïÑÏöî ÏóÜÏùå
                    },
                    items: orderItems.map(item => ({ // 4. items Íµ¨Ï°∞Îäî Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
                        optionid: item.optionid,
                        quantity: item.quantity,
                        price: item.price
                    }))
                }
            ;

            console.log('üì¶ Î∞±ÏóîÎìúÎ°ú Ï†ÑÏÜ°Ìï† ÏµúÏ¢Ö Ï£ºÎ¨∏ Ï†ïÎ≥¥:', JSON.stringify(orderPayload, null, 2));

            // Ïù¥Ï†ú Ïù¥ orderPayloadÎ•º Î≥¥ÎÇ¥Î©¥ Îê©ÎãàÎã§.
            const response = await api.post('/api/member/orders', orderPayload);

            console.log('üéâ Ï£ºÎ¨∏ ÏÑ±Í≥µ! ÏÑúÎ≤Ñ ÏùëÎãµ:', response.data);

            // ‚úÖ 2. Ï£ºÎ¨∏ ÏÑ±Í≥µ ÌõÑ Î°úÏßÅÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÌï©ÎãàÎã§.
            await removeItemsFromCart(orderItems);

            localStorage.removeItem('orderItems');
            alert('Ï£ºÎ¨∏Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
            navigate('/');
        } catch (err) {
            setErrorMsg(err.message || 'Ï£ºÎ¨∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // --- Î†åÎçîÎßÅÏùÑ ÏúÑÌïú Í≥ÑÏÇ∞ ---
    const subtotal = orderItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const shippingFee = subtotal >= 50000 ? 0 : 3000;
    const total = subtotal + shippingFee;
    const formatToKRW = (num) => num.toLocaleString() + 'Ïõê';

    return (
        <>
            <div className="mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-8 py-12 lg:py-16">
                <div className="mt-12 flex flex-col lg:flex-row gap-12">
                    <div className="lg:w-2/3 space-y-8">
                        {/* --- Î∞∞ÏÜ°ÏßÄ ÏÑ†ÌÉù --- */}
                        <div>
                            <div className="flex justify-between items-center mb-4">
                                <h2 id='font3' className="text-2xl tracking-tight text-kalani-navy">Î∞∞ÏÜ°ÏßÄ Ï†ïÎ≥¥</h2>
                                <TailButton onClick={() => setIsAddressModalOpen(true)}>
                                    Î∞∞ÏÜ°ÏßÄ Í¥ÄÎ¶¨
                                </TailButton>
                            </div>

                            {/* Ï£ºÏÜå Î™©Î°ù */}
                            <div className="space-y-3">
                                {existingAddresses.length > 0 ? (
                                    existingAddresses.map(addr => (
                                        <div key={addr.addressId}
                                            onClick={() => setSelectedAddressId(addr.addressId)}
                                            className={`p-4 border rounded-md cursor-pointer transition-all ${selectedAddressId === addr.addressId ? 'border-kalani-gold bg-kalani-gold/10 shadow-md' : 'border-gray-200'}`}>
                                            <p className="font-semibold">
                                                {addr.name}
                                                {addr.isMain && <span className="text-xs font-bold text-kalani-gold ml-2">Í∏∞Î≥∏</span>}
                                            </p>
                                            <p className="text-sm text-gray-600 mt-1">[{addr.zip}] {addr.address1} {addr.address2}</p>
                                            <p className="text-sm text-gray-500">{addr.phone}</p>
                                        </div>
                                    ))
                                ) : (
                                    !isLoading && (
                                        <div className="text-center text-gray-500 p-8 border-2 border-dashed rounded-md">
                                            <p>Ï†ÄÏû•Îêú Î∞∞ÏÜ°ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
                                            <p className="mt-2">Ïò§Î•∏Ï™Ω ÏúÑ 'Î∞∞ÏÜ°ÏßÄ Í¥ÄÎ¶¨' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ï≤´ Î∞∞ÏÜ°ÏßÄÎ•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.</p>
                                        </div>
                                    )
                                )}
                            </div>
                        </div>

                        {/* Í≤∞Ï†ú ÏàòÎã® ÏÑ†ÌÉù */}
                        <div
                            className={`overflow-hidden transition-all duration-500 ease-in-out transform ${
                                // üí° showPayment ÏÉÅÌÉú ÎåÄÏã† selectedAddressIdÎ•º ÏßÅÏ†ë Ï°∞Í±¥ÏúºÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
                                selectedAddressId
                                    ? 'max-h-[300px] opacity-100 translate-y-0'
                                    : 'max-h-0 opacity-0 -translate-y-3 pointer-events-none'
                                }`}
                        >
                            <h2 id="font3" className="text-2xl tracking-tight text-kalani-navy mt-2 mb-5">Í≤∞Ï†ú ÏàòÎã® ÏÑ†ÌÉù</h2>
                            <div className="flex gap-6">
                                <label className="flex items-center gap-2 cursor-pointer text-gray-700">
                                    <input
                                        type="radio"
                                        name="payment"
                                        value="card"
                                        checked={payment === 'card'}
                                        onChange={(e) => setPayment(e.target.value)}
                                        className="form-radio"
                                    />
                                    Ïã†Ïö©/Ï≤¥ÌÅ¨ Ïπ¥Îìú
                                </label>
                                <label className="flex items-center gap-2 cursor-pointer">
                                    <input
                                        type="radio"
                                        name="payment"
                                        value="bank"
                                        checked={payment === 'bank'}
                                        onChange={(e) => setPayment(e.target.value)}
                                        className="form-radio"
                                    />
                                    Î¨¥ÌÜµÏû• ÏûÖÍ∏à
                                </label>
                            </div>
                        </div>
                        <ErrorMessage errorMsg={errorMsg} />
                    </div>


                    {/* Ï£ºÎ¨∏ ÏöîÏïΩ */}
                    <div className="flex flex-col justify-between lg:w-1/3 border border-gray-200 rounded-md p-6 shadow-nm bg-white space-y-4">
                        <div>
                            <h2 className="text-lg font-semibold text-kalani-navy mb-4">Ï£ºÎ¨∏ ÏöîÏïΩ</h2>
                            <div className="text-sm text-gray-700 space-y-2">
                                <div className="flex justify-between">
                                    <span>ÏÉÅÌíà Í∏àÏï°</span>
                                    <span>{formatToKRW(subtotal)}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span>Î∞∞ÏÜ°ÎπÑ</span>
                                    <span>{shippingFee === 0 ? 'Î¨¥Î£å' : formatToKRW(shippingFee)}</span>
                                </div>
                            </div>
                        </div>
                        <div>
                            <div className="border-t border-gray-300 pt-3 flex justify-between font-bold text-base text-kalani-ash">
                                <span>Ï¥ù Í≤∞Ï†ú Í∏àÏï°</span>
                                <span>{formatToKRW(total)}</span>
                            </div>
                            <TailButton variant="navy" className="w-full mt-4 hover:bg-kalani-gold" onClick={handleOrder}>
                                Í≤∞Ï†úÌïòÍ∏∞
                            </TailButton>
                        </div>
                    </div>
                </div>
            </div>
            {/* --- Î∞∞ÏÜ°ÏßÄ Í¥ÄÎ¶¨ Î™®Îã¨ --- */}
            {isAddressModalOpen && (
                <Modal onClose={() => setIsAddressModalOpen(false)}>
                    <EditAddressForm
                        addresses={existingAddresses}
                        onDataChange={handleAddressDataChange}
                        onCancel={() => setIsAddressModalOpen(false)}
                    />
                </Modal>
            )}
        </>
    );
}
